# .github/workflows/terraform-security-scan.yml
name: Terraform Security Scan - Azure

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'terraform/azure/**'
      - '.github/workflows/terraform-security-scan.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'terraform/azure/**'
  workflow_dispatch:

env:
  TERRAFORM_DIR: terraform/azure
  REPORTS_DIR: security-reports

jobs:
  terraform-security-scan:
    runs-on: ubuntu-latest
    name: Azure Terraform Security Analysis
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas openpyxl

    - name: Create Reports Directory
      run: mkdir -p ${{ env.REPORTS_DIR }}

    - name: Run Checkov Security Scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.TERRAFORM_DIR }}
        framework: terraform
        output_format: json,cli
        output_file_path: ${{ env.REPORTS_DIR }}/checkov-raw-report.json
        soft_fail: true
        download_external_modules: true
        
    - name: Display Checkov Results Summary
      if: always()
      run: |
        echo "=== Checkov Scan Summary ==="
        if [ -f "${{ env.REPORTS_DIR }}/checkov-raw-report.json" ]; then
          echo "‚úÖ Checkov scan completed successfully"
          FAILED_CHECKS=$(jq '[.results.failed_checks[]] | length' ${{ env.REPORTS_DIR }}/checkov-raw-report.json 2>/dev/null || echo "0")
          PASSED_CHECKS=$(jq '[.results.passed_checks[]] | length' ${{ env.REPORTS_DIR }}/checkov-raw-report.json 2>/dev/null || echo "0")
          echo "‚ùå Failed Checks: $FAILED_CHECKS"
          echo "‚úÖ Passed Checks: $PASSED_CHECKS"
        else
          echo "‚ö†Ô∏è Checkov report not found"
        fi

    - name: Generate CSV Report
      if: always()
      run: python3 .github/scripts/checkov-to-csv.py
      env:
        INPUT_JSON: ${{ env.REPORTS_DIR }}/checkov-raw-report.json
        OUTPUT_CSV: ${{ env.REPORTS_DIR }}/terraform-security-report.csv
        OUTPUT_EXCEL: ${{ env.REPORTS_DIR }}/terraform-security-report.xlsx
        SCAN_TARGET: ${{ env.TERRAFORM_DIR }}

    - name: Display CSV Report Summary
      if: always()
      run: |
        if [ -f "${{ env.REPORTS_DIR }}/terraform-security-report.csv" ]; then
          echo "=== Security Report Generated ==="
          echo "üìä Total issues found: $(tail -n +2 ${{ env.REPORTS_DIR }}/terraform-security-report.csv | wc -l)"
          echo "üìÅ Report location: ${{ env.REPORTS_DIR }}/terraform-security-report.csv"
          echo ""
          echo "=== Top 5 Issues ==="
          head -n 6 ${{ env.REPORTS_DIR }}/terraform-security-report.csv
        fi

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-security-reports-${{ github.run_number }}
        path: |
          ${{ env.REPORTS_DIR }}/
        retention-days: 30

    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('results.sarif') != ''
      with:
        sarif_file: results.sarif
        category: terraform-checkov

    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const csvPath = '${{ env.REPORTS_DIR }}/terraform-security-report.csv';
            if (fs.existsSync(csvPath)) {
              const csvContent = fs.readFileSync(csvPath, 'utf8');
              const lines = csvContent.trim().split('\n');
              const totalIssues = lines.length - 1;
              
              const severityCounts = {};
              lines.slice(1).forEach(line => {
                const severity = line.split(',')[5] || 'UNKNOWN';
                severityCounts[severity] = (severityCounts[severity] || 0) + 1;
              });
              
              let comment = `## üõ°Ô∏è Terraform Security Scan Results\n\n`;
              comment += `**üìä Scan Summary for \`${{ env.TERRAFORM_DIR }}\`:**\n`;
              comment += `- Total Security Issues: **${totalIssues}**\n`;
              
              if (totalIssues > 0) {
                comment += `\n**üìà Issues by Severity:**\n`;
                Object.entries(severityCounts).forEach(([severity, count]) => {
                  const emoji = severity === 'CRITICAL' ? 'üî¥' : severity === 'HIGH' ? 'üü†' : severity === 'MEDIUM' ? 'üü°' : 'üîµ';
                  comment += `- ${emoji} ${severity}: ${count}\n`;
                });
                
                comment += `\n**üìã Top Issues:**\n`;
                const topIssues = lines.slice(1, 6);
                topIssues.forEach((line, index) => {
                  const parts = line.split(',');
                  const checkId = parts[2] || 'N/A';
                  const checkName = parts[3] || 'N/A';
                  const severity = parts[5] || 'N/A';
                  const file = parts[7] || 'N/A';
                  comment += `${index + 1}. **${checkId}** - ${checkName} (${severity})\n   üìÅ \`${file}\`\n`;
                });
                
                if (totalIssues > 5) {
                  comment += `\n*... and ${totalIssues - 5} more issues. Download the full report from the workflow artifacts.*\n`;
                }
              } else {
                comment += `\n‚úÖ **Excellent!** No security issues found in your Terraform configuration.\n`;
              }
              
              comment += `\nüì• **Download detailed reports from the [workflow run artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\n`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Error creating PR comment:', error.message);
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üõ°Ô∏è Terraform Security Scan Results\n\nSecurity scan completed. Please check the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed results.`
            });
          }

    - name: Security Gate Check
      if: always()
      run: |
        if [ -f "${{ env.REPORTS_DIR }}/terraform-security-report.csv" ]; then
          CRITICAL_COUNT=$(awk -F, '$6=="CRITICAL" {count++} END {print count+0}' ${{ env.REPORTS_DIR }}/terraform-security-report.csv)
          HIGH_COUNT=$(awk -F, '$6=="HIGH" {count++} END {print count+0}' ${{ env.REPORTS_DIR }}/terraform-security-report.csv)
          
          echo "üîç Security Gate Check:"
          echo "üî¥ Critical Issues: $CRITICAL_COUNT"
          echo "üü† High Issues: $HIGH_COUNT"
          
          echo "‚úÖ Security gate passed"
        fi
